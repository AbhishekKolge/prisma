// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

//npx prisma init. it will initialize prisma, schema and migration. we can specifiy database type using --datasource-provider mysql
//npx prisma init --datasource-provider mysql

//generator is use to specify what our prisma code generated into. by default it is prisma-client-js formatter.
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//after defining models to migrate it to database
//npx prisma migrate dev --name init (by writing dev we are specifing it is for development only. we are giving it a name of init because we are initializing our database for first time)
//it creates a migration file which will be able to interact with our database and make all the changes. it also create a prisma client which is specified in generator. everytime when we make migration prisma client will get updated. prisma client is essentially all the code required to interact with database.
//to use this prisma client we need to install @prisma/client (npm i @prisma/client)
//we can manually regenerate the client: npx prisma generate. it goes through all the steps of generating based on the specified provider.
//prisma studio
// npx prisma studio

//every field is consist of four different parts.
//1.name 2.type 3.modifier (?: optional, []: multiple) 4.attributes

//there are two types of attribute. field level and block level.

// (
//   one to many and multiple one to many:
//   one user has many written posts
//   one user has many favorite posts

//   many to many:
//   one post has many categories
//   one category has many posts
// )

model User {
  // id      Int      @id @default(autoincrement())
  id               String          @id @default(uuid())
  age              Int
  name             String
  email            String          @unique
  role             Role            @default(BASIC)
  // isAdmin        Boolean?
  // preferences Json
  // largeNumber BigInt
  // blob    Bytes
  writtenPosts     Post[]          @relation("written")
  favoritePosts    Post[]          @relation("favorite")
  userPreference   UserPreference? @relation(fields: [userPreferenceId], references: [id])
  userPreferenceId String?         @unique

  @@unique([age, name])
  @@index([email])
}

// we need to add name to relation if we have two references to exact same table. in our case post.

model Post {
  id            String     @id @default(uuid())
  title         String
  averageRating Float
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  author        User       @relation("written", fields: [authorId], references: [id])
  authorId      String
  favoritedBy   User?      @relation("favorite", fields: [favoritedById], references: [id])
  favoritedById String?
  categories    Category[]

  // @@id([title, authorId]) //composite id
}

model Category {
  id    String @id @default(uuid())
  name  String @unique
  posts Post[]
}

model UserPreference {
  id           String  @id @default(uuid())
  emailUpdates Boolean
  user         User?
}

enum Role {
  BASIC
  ADMIN
}
